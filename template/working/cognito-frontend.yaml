AWSTemplateFormatVersion: 2010-09-09
Parameters:
  MainStackName:
    Description: name of main stack
    Type: String
  LayerStackName:
    Description: name of the lambda layer stack
    Type: String
  ProjectName:
    Description: Used as a prefix for project resources.  Can be up to 12 characters, lowercase letters (a-z) only.
    Type: String
    Default: mybookstore
    AllowedPattern: "^[a-z]{1,12}"
    ConstraintDescription: The ProjectName can be up to 12 characters, lowercase letters (a-z) only.
Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo
      SeederFunctionBucket: fsd-aws-wildrydes-us-east-1
    us-west-2:
      Bucket: aws-bookstore-demo-us-west-2
      SeederFunctionBucket: fsd-aws-wildrydes-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-eu-central-1
      SeederFunctionBucket: fsd-aws-wildrydes-eu-central-1
    eu-west-1:
      Bucket: aws-bookstore-demo-eu-west-1
      SeederFunctionBucket: fsd-aws-wildrydes-eu-west-1
  Constants:
    AppKeys:
      SeedRepository: https://s3.amazonaws.com/ee-assets-prod-us-east-1/modules/09f302bc1c3b49efa121cb0cc01302d3/v1/bookstore-webassets.zip
    S3Keys:
      UpdateConfigCode: functions/UpdateConfig.zip
      DeleteBucketsCode: functions/DeleteBuckets.zip
      SeederFunctionCode: aws-serverless-codecommit-seeder.zip
Resources:
  ApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: CognitoDefaultUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt
          - UserPool
          - Arn
      RestApiId: !ImportValue {"Fn::Sub": "${MainStackName}-AppApi"}
      Type: COGNITO_USER_POOLS
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 03db03b0-3367-4eb8-bfa1-82df7efc4df4
  APIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: Prod deployment for API
      RestApiId: !ImportValue {"Fn::Sub": "${MainStackName}-AppApi"}
      StageName: prod
      StageDescription:
        DataTraceEnabled: true
        TracingEnabled: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 278dda65-02c9-49fa-a19c-3dd7afd25683
# ---------- COGNITO DEFINITIONS ---------           
  SNSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sns:publish'
                Resource: '*'
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${ProjectName}-user-pool'
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary password
          SMSMessage: 'Your username is {username} and temporary password is {####}.'
        UnusedAccountValidityDays: 7
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Here is your verification code: {####}'
      EmailVerificationSubject: Your verification code
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${ProjectName}-client'
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${ProjectName}Identity'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt 
            - UserPool
            - ProviderName
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: '*'
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:execute-api:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !ImportValue {"Fn::Sub": "${MainStackName}-AppApi"}
                    - /*
  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt 
          - CognitoAuthorizedRole
          - Arn
        unauthenticated: !GetAtt 
          - CognitoUnAuthorizedRole
          - Arn
# ------------------------ FRONTEND ------------------------
  AssetsCodeRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryDescription: Code repository for web application
      RepositoryName: !Sub '${ProjectName}-WebAssets'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a2e798f0-374b-4297-b68f-ce7766170a6d
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      MetricsConfigurations:
        - Id: EntireBucket
      WebsiteConfiguration:
        IndexDocument: index.html
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a141b7c9-9999-40e3-8702-f1cf283573ef
  AssetsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/*'
            Principal:
              AWS: !Sub
                arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${AssetsBucketOriginAccessIdentity}
    DependsOn:
      - AssetsBucketOriginAccessIdentity
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c177c7a0-df73-4587-90aa-de6b7c3a53b2
  AssetsBucketOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OriginAccessIdentity for ${AssetsBucket}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f391801b-d255-40b5-be40-725ad2e93a22
  AssetsCDN:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - AssetsBucketOriginAccessIdentity
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'CDN for ${AssetsBucket}'
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Join
              - ''
              - - !Sub '${AssetsBucket}.s3'
                - !If [IADRegion, '', !Sub '-${AWS::Region}']
                - '.amazonaws.com'
            Id: S3
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${AssetsBucketOriginAccessIdentity}
        DefaultCacheBehavior:
          TargetOriginId: S3
          ViewerProtocolPolicy: https-only
          ForwardedValues:
            QueryString: 'false'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 16b95097-f526-4bf7-b997-ce2f6187ef4d
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-codebuild-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codebuild-policy
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt AssetsBucket.Arn
                      - /*
                  - !Join 
                    - ''
                    - - !GetAtt PipelineArtifactsBucket.Arn
                      - /*
                Effect: Allow
        - PolicyName: codebuild-logs
          PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'cloudfront:CreateInvalidation'
                Resource: '*'
                Effect: Allow
      Path: /
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3aa76bbe-43cb-455a-9e85-48663b8ba66e
  CodePipelineRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-CodePipeline-Role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codecommit-for-codepipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:CancelUploadArchive'
                Resource: !GetAtt AssetsCodeRepository.Arn
                Effect: Allow
        - PolicyName: artifacts-for-pipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'Fn::GetAtt':
                        - PipelineArtifactsBucket
                        - Arn
                      - /*
                Effect: Allow
        - PolicyName: codebuild-for-pipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: !GetAtt 
                  - CodeBuildProject
                  - Arn
                Effect: Allow
      Path: /
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c7b2d059-8720-4407-a75f-9b5f50c503d1
  PipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bbbc886f-d307-45dc-a6e3-63353f40a4f4
  CodeBuildProject:
    DependsOn:
      - PipelineArtifactsBucket
    Description: Creating AWS CodeBuild project
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub 'Building stage for ${ProjectName}.'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref PipelineArtifactsBucket
        Image: 'aws/codebuild/standard:2.0'
        Type: LINUX_CONTAINER
      Name: !Sub '${ProjectName}-build'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 8
            pre_build:
              commands:
                - echo Installing NPM dependencies...
                - npm install
            build:
              commands:
                - npm run build
            post_build:
              commands:
                - echo Uploading to AssetsBucket 
                - aws s3 cp --recursive ./build s3://${AssetsBucket}/ 
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/service-worker.js s3://${AssetsBucket}/
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${AssetsBucket}/
                - aws cloudfront create-invalidation --distribution-id ${AssetsCDN} --paths /index.html /service-worker.js

          artifacts:
            files:
              - '**/*'
            base-directory: build        
      Tags:
        - Key: app-name
          Value: !Ref ProjectName
      TimeoutInMinutes: 10
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a83e893f-d993-4a92-9c51-b00425960a96
  AssetsCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${ProjectName}-Assets-Pipeline'
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Category: Source
                Owner: AWS
                Provider: CodeCommit
              Configuration:
                BranchName: master
                RepositoryName: !Sub '${ProjectName}-WebAssets'
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
        - Name: Build
          Actions:
            - Name: build-and-deploy
              InputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-BuildArtifact'
              Configuration:
                ProjectName: !Sub '${ProjectName}-build'
              RunOrder: 1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bd7060e4-3e26-442c-9c4e-141ca61a9590
    DependsOn:
      - PipelineArtifactsBucket
  SeederFunction:
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - SeederFunctionBucket
        S3Key: !FindInMap
         - Constants
         - S3Keys
         - SeederFunctionCode
      Description: CodeCommit repository seeder
      Handler: seeder.SeedRepositoryHandler
      MemorySize: 3008
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: java8
      Timeout: 900
    Type: 'AWS::Lambda::Function'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6b5081a3-db00-41db-a607-c9d5f98cf394
    DependsOn:
      - AssetsCodeRepository

  UpdateConfigFunction:
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - UpdateConfigCode
      Description: Update config for CodeCommit repository
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          API_URL: { "Fn::Sub" : [ 'https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/prod', { AppApi: !ImportValue {"Fn::Sub": "${MainStackName}-AppApi"} } ] }
          BRANCH_NAME: master
          REGION: !Ref 'AWS::Region'
          REPOSITORY_NAME: !Sub '${ProjectName}-WebAssets'
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
          IDENTITY_POOL_ID: !Ref IdentityPool
    Type: 'AWS::Lambda::Function'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 00cdcc4b-3885-4a51-bdad-776ac697419c
    DependsOn:
      - AssetsCodeRepository
      - SeederFunction
      - RepositorySeeder
      - UserPool
      - UserPoolClient
      - IdentityPool
  SeederRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetRepository'
                  - 'codecommit:GitPush'
                  - 'codecommit:GetBranch'
                  - 'codecommit:PutFile'
                Effect: Allow
                Resource: !GetAtt AssetsCodeRepository.Arn
            Version: 2012-10-17
          PolicyName: SeederRolePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:*'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
            Version: 2012-10-17
          PolicyName: LogsPolicy
    Type: 'AWS::IAM::Role'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a10d77af-fa97-40ee-a6f0-5d9988792aeb
  RepositorySeeder:
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - SeederFunction
          - Arn
      sourceUrl: !FindInMap [Constants, AppKeys, SeedRepository]
      targetRepositoryName: !Sub '${ProjectName}-WebAssets'
      targetRepositoryRegion: '${AWS::Region}'
    Type: 'Custom::RepositorySeeder'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 688ea29a-9fa9-40c9-b5a8-85e863cc8a4c
  RepositoryUpdater:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      ParameterOne: Parameter to pass into Custom Lambda Function
      DependsOn: UpdateConfigFunction
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 63b08124-fccb-4874-ab13-ce6cfe6ce885
# ---------- CLEANUP STACK ---------
  BucketCleanupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-BucketCleanupRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BucketCleanupPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:List*'
                  - 's3:DeleteObject'
                Effect: Allow
                Resource:
                  - !GetAtt AssetsBucket.Arn
                  - !GetAtt PipelineArtifactsBucket.Arn
                  - !Join [ "", [ !GetAtt AssetsBucket.Arn , "/*" ]]
                  - !Join [ "", [ !GetAtt PipelineArtifactsBucket.Arn , "/*" ]]
            Version: 2012-10-17
  BucketCleanupFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-BucketCleanup'
      Description: Cleanup S3 buckets when deleting stack
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt BucketCleanupRole.Arn
      Runtime: python3.7
      Timeout: 30
      Layers:
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonLambdaLayer"}
      Code:
        S3Bucket: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
        S3Key: !FindInMap 
                 - Constants
                 - S3Keys
                 - DeleteBucketsCode
  DeleteBucketsObjects:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt BucketCleanupFunction.Arn
      BucketNames:
        - !Ref AssetsBucket
        - !Ref PipelineArtifactsBucket
      DependsOn:
        - BucketCleanupFunction
        - BucketCleanupRole
Outputs:
  CodeRepository:
    Description: Code repository for the web application.
    Export:
      Name: !Sub '${ProjectName}CodeRepository'
    Value: !GetAtt AssetsCodeRepository.Name
  WebApplication:
    Description: The URL for the web application
    Export:
      Name: !Sub '${ProjectName}WebApp'
    Value: !Sub
      - https://${Domain}
      - { Domain: !GetAtt AssetsCDN.DomainName }
#  PortForwardCmd:
#    Description: Cmd for tunneling into Kibana
#    Value: !Sub "ssh -i /your/path/to/key.pem -L 9092:${ElasticsearchDomainEndpoint}:443 -N ec2-user@${DataPrepperInstance.PublicIp}"
