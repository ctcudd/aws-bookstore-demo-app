AWSTemplateFormatVersion: 2010-09-09
Parameters:
  NetworkStackName:
    Description: name of network stack
    Type: String
  ElasticsearchStackName:
    Description: name of elasticsearch stack
    Type: String
  DataPrepperStackName:
    Description: name of data prepper stack
    Type: String
  NeptuneStackName:
    Description: name of data neptune stack
    Type: String
  LayerStackName:
    Description: name of the lambda layer stack
    Type: String
  RedisStackName:
    Description: name of the reddis stack
    Type: String
  ProjectName:
    Description: Used as a prefix for project resources.  Can be up to 12 characters, lowercase letters (a-z) only.
    Type: String
    Default: mybookstore
    AllowedPattern: "^[a-z]{1,12}"
    ConstraintDescription: The ProjectName can be up to 12 characters, lowercase letters (a-z) only.
Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo
      ConfigBucket: ee-assets-prod-us-east-1
    us-west-2:
      Bucket: aws-bookstore-demo-us-west-2
      ConfigBucket: ee-assets-prod-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-eu-central-1
      ConfigBucket: ee-assets-prod-us-west-2
    eu-west-1:
      Bucket: aws-bookstore-demo-eu-west-1
      ConfigBucket: ee-assets-prod-us-west-2
  Constants:
    S3Keys:
      ListOrdersCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/listOrders.zip
      GetBookCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/getBook.zip
      ListBooksCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/listBooks.zip
      UpdateCartCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/updateCart.zip
      GetCartItemCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/getCartItem.zip
      ListItemsInCartCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/listItemsInCart.zip
      AddToCartCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/addToCart.zip
      RemoveFromCartCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/removeFromCart.zip
      GetBestSellersCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/getBestSellers.zip
      CheckoutCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/checkout.zip
      UploadBooksCode: functions/UploadBooks.zip
      GetRecommendationsCode: functions/GetRecommendations.zip
      GetRecommendationsByBookCode: functions/GetRecommendationsByBook.zip
      SearchCode: functions/Search.zip
      UpdateSearchCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/updateSearchCluster.zip
      UpdateBestSellersCode: modules/09f302bc1c3b49efa121cb0cc01302d3/v1/functions/updateBestSellers.zip
      booksData: data/books.json
Resources:
# ---------- ROLES FOR DYNAMODB ---------
  DynamoDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-DynamoDbLambda'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
      Policies:
        - PolicyName: PutRidePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !GetAtt 
                    - TBooks
                    - Arn
                  - !GetAtt 
                    - TOrders
                    - Arn
                  - !GetAtt 
                    - TCart
                    - Arn
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - TBooks
                        - Arn
                      - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 07b29683-0ea5-44bf-a439-fcb89713fd09

# ---------- ROLES FOR NEPTUNE ---------
  RecommendationsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-RecommendationsLambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
      Policies:
        - PolicyName: RecommendationsLambdaRoleEC2
          PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DetachNetworkInterface'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17

# ---------- DYNAMODB TABLES DEFINITIONS ---------
  TBooks:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Books'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: category-index
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9de25578-c943-42f5-9ec7-7a5258c7771a
  TOrders:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Orders'
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
        - AttributeName: orderId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES  
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 57fb3162-6a2d-4651-a9c8-7404e82181e8
  TCart:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Cart'
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: bookId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
        - AttributeName: bookId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e1a45038-ec76-464d-91b5-6b31bc325fa7
# ---------- ELASTICSEARCH ROLES DEFINITIONS ---------        
  ESSearchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-ESSearchRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
      Policies:
        - PolicyName: !Sub '${ProjectName}-lambda-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpPost'
                  - 'es:ESHttpGet'
                Resource: !Join 
                  - ''
                  - - !ImportValue {"Fn::Sub": "${ElasticsearchStackName}-DomainArn"}
                    - /*
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !FindInMap 
                      - S3Buckets
                      - !Ref 'AWS::Region'
                      - Bucket
                    - /*
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                Resource:
                  - !GetAtt 
                    - TBooks
                    - Arn
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - TBooks
                        - Arn
                      - /stream/*

# ---------- ROLES FOR ELASTICACHE ---------  
  RedisRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-RedisRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
        
# ---------- LAMBDA STREAMING FUNCTIONS ---------
  UpdateSearchCluster:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - ESSearchRole
      - TBooks
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateSearchCluster'
      Description: 'Update Elasticsearch cluster as books are added'
      Handler: index.handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-python38-ver-1-3-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonLambdaLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
      Role: !GetAtt 
        - ESSearchRole
        - Arn
      Runtime: python3.8
      Timeout: '60'
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-VPCSecurityGroup"}
        SubnetIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateSearchCode
      Environment:
        Variables:
          ESENDPOINT: !ImportValue {"Fn::Sub": "${ElasticsearchStackName}-DomainEndpoint"}
          REGION: !Ref 'AWS::Region'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PrivateDNS"}

  FunctionUpdateBestSellers:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RedisRole
      - TOrders
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateBestSellers'
      Description: 'Updates BestSellers as orders are placed'
      Handler: index.handler
      Role: !GetAtt 
        - RedisRole
        - Arn
      Runtime: nodejs12.x
      Timeout: '60'
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue {"Fn::Sub": "${RedisStackName}-RedisSecurityGroup"}
        SubnetIds: 
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateBestSellersCode
      Environment:
        Variables:
          URL: !ImportValue {"Fn::Sub": "${RedisStackName}-RedisEndpoint"}
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PrivateDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeRedisLayer"}

 # ----------  STREAMING TRIGGERS ---------                     
  DataTableStream:
    DependsOn: TBooks
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt 
        - TBooks
        - StreamArn
      FunctionName: !GetAtt 
        - UpdateSearchCluster
        - Arn
      StartingPosition: TRIM_HORIZON
  OrderTableStream:
    DependsOn: TOrders
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt 
        - TOrders
        - StreamArn
      FunctionName: !GetAtt 
        - FunctionUpdateBestSellers
        - Arn
      StartingPosition: TRIM_HORIZON   

# ---------- LAMBDA for DYNAMODB FUNCTIONS ---------

# This function needs a package.json file at the root with contents {}
  FunctionListOrders:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListOrders'
      Description: Get list of books ordered by customerId
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Orders'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListOrdersCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f873825f-3037-47b0-90b4-fca6924fb4e9
  FunctionGetBook:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBook'
      Description: Get book by id
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetBookCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1ae22cac-5803-4077-a6fe-1a3ca1aedfc2
  FunctionListBooks:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListBooks'
      Description: Get list of books by category
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListBooksCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8e306d11-6d48-49e0-8f69-760139c83447
  FunctionUpdateCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateCart'
      Description: Update Customer's cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateCartCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 92605ac3-2103-491b-8593-c1ed98181425
  FunctionGetCartItem:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetCartItem'
      Description: Get item in cart by customer and book id
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetCartItemCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e64608f0-5134-4c91-8f3c-4d03408c8236
  FunctionListItemsInCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListOrdersInCart'
      Description: Get list of items in cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListItemsInCartCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e64608f0-5134-4c91-8f3c-4d03408c8236
  FunctionAddToCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-AddToCart'
      Description: Add a book to cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - AddToCartCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e64608f0-5134-4c91-8f3c-4d03408c8236
  FunctionRemoveFromCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-RemoveFromCart'
      Description: Remove a book from cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - RemoveFromCartCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e64608f0-5134-4c91-8f3c-4d03408c8236
  FunctionCheckout:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-Checkout'
      Description: Get list of books ordered by customerId
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          ORDERS_TABLE: !Sub '${ProjectName}-Orders'
          CART_TABLE: !Sub '${ProjectName}-Cart'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PublicDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - CheckoutCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9c3f4191-a370-4344-a5b1-626228919c45
  FunctionUploadBooks:
    DependsOn: DataTableStream
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-UploadBooks'
      Description: Upload sample data for books
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
          S3_BUCKET: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
          FILE_NAME: !FindInMap 
                    - Constants
                    - S3Keys
                    - booksData
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UploadBooksCode
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9c3f4191-a370-4344-a5b1-626228919c47

  # ---------- LAMBDA FUNCTIONS for NEPTUNE ---------

  FunctionGetRecommendations:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetRecommendations'
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - GetRecommendationsCode
      Description: Get the top 5 product recommendations from Neptune
      Environment:
        Variables:
          neptunedb: !ImportValue {"Fn::Sub": "${NeptuneStackName}-NeptuneClusterEndpoint"}
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PrivateDNS"}
      Handler: index.handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-python38-ver-1-3-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonGremlinLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
      MemorySize: 256
      Role:
        'Fn::GetAtt':
          - RecommendationsLambdaRole
          - Arn
      Runtime: python3.8
      Timeout: 30
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds: [!ImportValue {"Fn::Sub": "${NeptuneStackName}-NeptuneSecurityGroup"}]
        SubnetIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet2"}

  FunctionGetRecommendationsByBook:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetRecommendationsByBook'
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - GetRecommendationsByBookCode
      Description: Get friends who purchased this book
      Environment:
        Variables:
          neptunedb: !ImportValue {"Fn::Sub": "${NeptuneStackName}-NeptuneClusterEndpoint"}
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PrivateDNS"}
      Handler: index.handler
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-python38-ver-1-3-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonGremlinLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
      MemorySize: 256
      Role:
        'Fn::GetAtt':
          - RecommendationsLambdaRole
          - Arn
      Runtime: python3.8
      Timeout: 30
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds: [!ImportValue {"Fn::Sub": "${NeptuneStackName}-NeptuneSecurityGroup"}]
        SubnetIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet2"}

# ---------- LAMBDA FUNCTIONS for ELASTICSEARCH and ELASTICACHE  ---------          
  FunctionSearch:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - ESSearchRole
      - TBooks
    Properties:
      FunctionName: !Sub '${ProjectName}-Search'
      Description: Search for books across book names, authors, and categories
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt 
        - ESSearchRole
        - Arn
      Runtime: python3.8
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-python38-ver-1-3-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonLambdaLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
      Timeout: '60'
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-VPCSecurityGroup"}
        SubnetIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - SearchCode
      Environment:
        Variables:
          ESENDPOINT: !ImportValue {"Fn::Sub": "${ElasticsearchStackName}-DomainEndpoint"}
          REGION: !Ref 'AWS::Region'
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PrivateDNS"}
  FunctionGetBestSellers:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RedisRole
      - TOrders
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBestSellers'
      Description: Get the top 20 best selling books from ElastiCache
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt
        - RedisRole
        - Arn
      Runtime: nodejs12.x
      Timeout: '60'
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue {"Fn::Sub": "${RedisStackName}-RedisSecurityGroup"}
        SubnetIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - ConfigBucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetBestSellersCode
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:901920570463:layer:aws-otel-nodejs-ver-0-23-0:1
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeXrayLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-CollectorConfigLayer"}
        - !ImportValue {"Fn::Sub": "${LayerStackName}-NodeRedisLayer"}
      Environment:
        Variables:
          URL: !ImportValue {"Fn::Sub": "${RedisStackName}-RedisEndpoint"}
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /opt/config.yaml
          DATA_PREPPER_HOST: !ImportValue {"Fn::Sub": "${DataPrepperStackName}-PrivateDNS"}
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:55681/v1/traces"
  
 # ---------- LAMBDA PERMISSIONS ---------    
  FunctionListOrdersPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListOrders
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionGetRecommendationsPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetRecommendations
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetRecommendationsByBookPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetRecommendationsByBook
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /* 
  FunctionGetBookPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBook
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionListBooksPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListBooks
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionUpdateCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionUpdateCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionGetCartItemPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetCartItem
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionListItemsInCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListItemsInCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionAddToCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionAddToCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionRemoveFromCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionRemoveFromCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionCheckoutPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionCheckout
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionSearchPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionSearch
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionGetBestSellersPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBestSellers
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c  

 # ---------- API GATEWAY ---------         
  AppApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-Bookstore'
      Description: API used for Bookstore requests
      FailOnWarnings: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3e7a32d4-9e4d-4ecc-89b2-77203c5d926b
  RecomendationsApiRequestGET:
    DependsOn:
      - FunctionGetRecommendations
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetRecommendations
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref RecommendationsApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  RecomendationsApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref RecommendationsApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  RecomendationsByBookApiRequestGET:
    DependsOn:
      - FunctionGetRecommendationsByBook
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetRecommendationsByBook
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref RecommendationsByBookApiResource
      RequestParameters:
        method.request.path.bookId: false
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  RecomendationsByBookApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref RecommendationsByBookApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'        
  BooksApiRequestGET:
    DependsOn:
      - FunctionListOrdersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListBooks
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.category: false
      ResourceId: !Ref BooksApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5a740957-6b64-4ddd-bd1d-3027df7fc6d5
  BooksApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BooksApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f0f16a94-104a-431f-8c87-930f56274955
  BookItemApiRequestGET:
    DependsOn: FunctionGetBookPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBook
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref BookItemApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a311ee38-d902-4856-9f09-1d00d1bc8600
  BookItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BookItemApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c31e25ac-e338-4d21-9e4b-881a16e0a494
  OrdersApiRequestGET:
    DependsOn: FunctionListOrdersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListOrders
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9007f88f-407a-4ab7-9ebb-ce6fa13b223e
  OrdersApiRequestPOST:
    DependsOn: FunctionCheckoutPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionCheckout
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 454289ef-fb5c-4a1f-941d-4016ebc9cf24
  OrdersApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e97bf15c-b88b-48b7-b6d8-bffcaa87b24f
  CartApiRequestGET:
    DependsOn: FunctionListItemsInCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListItemsInCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3023c794-550d-4066-8a59-c139f4f54616
  CartApiRequestPOST:
    DependsOn: FunctionAddToCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionAddToCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 49458e1d-a6a5-4c44-96b5-f1e3f6c694a8
  CartApiRequestPUT:
    DependsOn: FunctionUpdateCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionUpdateCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6a4462a7-45d0-4bd9-a08a-03cd5621e0ce
  CartApiRequestDELETE:
    DependsOn: FunctionRemoveFromCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionRemoveFromCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a6392891-b014-4ea9-93a2-831f602268aa
  CartApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 97efc723-a637-41c7-b712-3af9363a1702
  CartItemApiRequestGET:
    DependsOn: FunctionGetCartItemPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetCartItem
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.bookId: true
      ResourceId: !Ref CartItemApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: acebdfda-9b64-45f8-a888-3d1251bba41a
  CartItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref CartItemApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0e6ce8f6-0271-439e-afcf-4e4d23c1edc3
  SearchApiRequestGET:
    DependsOn: FunctionSearchPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionSearch
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.q: false
      ResourceId: !Ref SearchApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  SearchApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref SearchApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  BestsellersApiRequestGET:
    DependsOn: FunctionGetBestSellersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBestSellers
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref BestsellersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BestsellersApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BestsellersApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
          
  RecommendationsApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: recommendations
  RecommendationsByBookApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref RecommendationsApiResource
      PathPart: '{bookId}'    
  BooksApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: books
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e0ffbcc7-5f62-43ac-b377-47ec80a5a71e
  BookItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref BooksApiResource
      PathPart: '{id}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 25b4ecc5-9d47-49cb-b5c4-d03574eee62e
  OrdersApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: orders
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cecab4d7-120d-48b2-99d9-1152b429cebc
  CartApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: cart
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9747c416-4f2e-45b1-bc9d-16335256f1db
  CartItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref CartApiResource
      PathPart: '{bookId}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a79e1eec-10b0-4593-9ea4-9c6b82c0ec8b
  SearchApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: search
  BestsellersApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: bestsellers
  BooksUploader:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt FunctionUploadBooks.Arn
      ParameterOne: Parameter to pass into Custom Lambda Function
      DependsOn: 
       - FunctionUploadBooks
       - UpdateSearchCluster
Outputs:
  StackName:
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-StackName
  AppApi:
    Value: !Ref AppApi
    Export:
      Name: !Sub ${AWS::StackName}-AppApi
