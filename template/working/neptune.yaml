AWSTemplateFormatVersion: 2010-09-09
Parameters:
  NetworkStackName:
    Description: name of network stack
    Type: String
  LayerStackName:
    Description: name of the lambda layer stack
    Type: String
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo
      NeptuneDataBucket: bookstore-neptune
    us-west-2:
      Bucket: aws-bookstore-demo-us-west-2
      NeptuneDataBucket: bookstore-neptune-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-eu-central-1
      NeptuneDataBucket: bookstore-neptune-eu-central-1
    eu-west-1:
      Bucket: aws-bookstore-demo-eu-west-1
      NeptuneDataBucket: bookstore-neptune-eu-west-1
  Constants:
    S3Keys:
      NeptuneLoaderCode: functions/NeptuneLoader.zip
      NeptuneIAMCode: functions/NeptuneIAM.zip
      bookstoreNeptuneS3DataPath: /data/

Resources:
  # ---------- NEPTUNE CLUSTER DEFINITION ---------
  bookstoreNeptuneSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for Neptune DB within book store app."
      SecurityGroupIngress:
        -
          CidrIp: "0.0.0.0/0"
          FromPort: 8182
          ToPort: 8182
          IpProtocol: tcp
      VpcId: !ImportValue {"Fn::Sub": "${NetworkStackName}-VPCID"}

  bookstoreNeptuneSubnetGroup:
    Type: "AWS::Neptune::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for Neptune DB within book store app."
      SubnetIds:
        - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
        - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet2"}

  bookstoreNeptuneCluster:
    Type: "AWS::Neptune::DBCluster"
    Properties:
      IamAuthEnabled : false
      DBSubnetGroupName:
        Ref: bookstoreNeptuneSubnetGroup
      VpcSecurityGroupIds: [ !GetAtt bookstoreNeptuneSecurityGroup.GroupId ]

  bookstoreNeptuneDB:
    Type: "AWS::Neptune::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref bookstoreNeptuneCluster
      DBInstanceClass: "db.r4.large"

# ---------- IAM ROLE ATTACH FOR S3 BULK LOAD ------------

  bookstoreNeptuneLoaderS3ReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderS3ReadPolicy
      Roles:
      - Ref: bookstoreNeptuneLoaderS3ReadRole
  bookstoreNeptuneLoaderS3ReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - rds.amazonaws.com
        Version: '2012-10-17'
      Path: /

  # ---------- CUSTOM CLOUDFORMATION RESOURCE FOR ATTACHING S3 READ ROLE TO NEPTUNE CLUSTER ---------

  bookstoreNeptuneIAMAttach:
    DependsOn: 
      - bookstoreNeptuneIAMAttachLambdaRoleCloudWatchStream
      - bookstoreNeptuneIAMAttachLambdaRoleCloudWatchGroup
      - bookstoreNeptuneIAMAttachLambdaRoleEC2
      - bookstoreNeptuneIAMAttachLambdaRoleRDS
      - bookstoreNeptuneIAMAttachLambdaRole
      - bookstoreNeptuneIAMAttachLambda
      - bookstoreNeptuneLoaderS3ReadPolicy
      - bookstoreNeptuneLoaderS3ReadRole
    Type: Custom::NeptuneIAMAttach
    Properties: 
      ServiceToken:
        Fn::GetAtt: [ bookstoreNeptuneIAMAttachLambda, Arn ]
      NeptuneDB: !Ref bookstoreNeptuneCluster
      IAMRole: 
        Fn::GetAtt: [ bookstoreNeptuneLoaderS3ReadRole, Arn ]
      Region: !Ref 'AWS::Region'
  bookstoreNeptuneIAMAttachLambdaRoleCloudWatchStream:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":log-group:/aws/lambda/",  !Ref bookstoreNeptuneIAMAttachLambda, ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleCloudWatchStream
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
  bookstoreNeptuneIAMAttachLambdaRoleCloudWatchGroup:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleCloudWatchGroup
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
  bookstoreNeptuneIAMAttachLambdaRoleEC2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:DetachNetworkInterface
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleEC2
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
  bookstoreNeptuneIAMAttachLambdaRoleRDS:
    DependsOn: bookstoreNeptuneDB
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - 
            Action:
              - rds:AddRoleToDBCluster
              - rds:DescribeDBClusters
            Effect: Allow
            Resource:
              - "*"
          - 
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - Fn::GetAtt: [ bookstoreNeptuneLoaderS3ReadRole, Arn ]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleRDS
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
  bookstoreNeptuneIAMAttachLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
  bookstoreNeptuneIAMAttachLambda:
    Type: AWS::Lambda::Function
    DependsOn: bookstoreNeptuneDB
    Properties:
      Code:
        S3Bucket: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
        S3Key: !FindInMap 
                 - Constants
                 - S3Keys
                 - NeptuneIAMCode
      Description: 'Lambda function to add an IAM policy to a Neptune cluster to allow for bulk load.'
      Handler: lambda_function.lambda_handler
      Layers:
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonLambdaLayer"}
      MemorySize: 128
      Role:
        Fn::GetAtt: [ bookstoreNeptuneIAMAttachLambdaRole, Arn ]
      Runtime: python3.6
      Timeout: 30

# ---------- VPC ENDPOINT FOR NEPTUNE BULK LOADER ACCESS TO S3 ---------

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:Get*'
              - 's3:PutObject'
              - 's3:List*'
            Resource:
              - '*'
      RouteTableIds:
        - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateRouteTable"}
      ServiceName: !Join [ "" , [ "com.amazonaws.", !Ref "AWS::Region", ".s3"]]
      VpcId: !ImportValue {"Fn::Sub": "${NetworkStackName}-VPCID"}

# ---------- CUSTOM RESOURCE TO INITIATE NEPTUNE BULK LOAD PROCESS ---------
  bookstoreNeptuneLoader: 
    DependsOn:
      - bookstoreNeptuneLoaderLambdaRoleCloudWatchStream
      - bookstoreNeptuneLoaderLambdaRoleCloudWatchGroup
      - bookstoreNeptuneLoaderLambdaRoleEC2
      - bookstoreNeptuneLoaderLambdaRole      
      - bookstoreNeptuneLoaderLambda
      - bookstoreNeptuneLoaderS3ReadPolicy
      - bookstoreNeptuneLoaderS3ReadRole
      - S3Endpoint
    Type: "Custom::NeptuneLoader"
    Properties: 
      ServiceToken:
        Fn::GetAtt: [ bookstoreNeptuneLoaderLambda, Arn]

  bookstoreNeptuneLoaderLambdaRoleCloudWatchStream:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":log-group:/aws/lambda/",  !Ref bookstoreNeptuneLoaderLambda, ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderLambdaRoleCloudWatchStream
      Roles:
      - Ref: bookstoreNeptuneLoaderLambdaRole
  bookstoreNeptuneLoaderLambdaRoleCloudWatchGroup:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderLambdaRoleCloudWatchGroup
      Roles:
      - Ref: bookstoreNeptuneLoaderLambdaRole
  bookstoreNeptuneLoaderLambdaRoleEC2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:DetachNetworkInterface          
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderLambdaRoleEC2
      Roles:
      - Ref: bookstoreNeptuneLoaderLambdaRole

  # deletion fails with: CloudFormation did not receive a response from your Custom Resource. Please check your logs for requestId [3b7e51eb-1554-4470-93f0-cd77616db5be]. If you are using the Python cfn-response module, you may need to update your Lambda function code so that CloudFormation can attach the updated version.
  bookstoreNeptuneLoaderLambda:
    Type: AWS::Lambda::Function
    DependsOn: 
      - bookstoreNeptuneDB
      - S3Endpoint
    Properties:
      Code:
        S3Bucket: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
        S3Key: !FindInMap 
                 - Constants
                 - S3Keys
                 - NeptuneLoaderCode
      Description: 'Lambda function to load data into Neptune instance.'
      Environment:
        Variables:
          neptunedb:
            Fn::GetAtt: [ bookstoreNeptuneCluster, Endpoint ] 
          neptuneloads3path: !Join
                              - ''
                              - - 's3://'
                                - !FindInMap
                                  - S3Buckets
                                  - !Ref 'AWS::Region'
                                  - NeptuneDataBucket
                                - !FindInMap
                                  - Constants
                                  - S3Keys
                                  - bookstoreNeptuneS3DataPath
          region: 
            Ref: "AWS::Region"
          s3loadiamrole: 
            Fn::GetAtt: [ bookstoreNeptuneLoaderS3ReadRole, Arn]
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Layers:
        - !ImportValue {"Fn::Sub": "${LayerStackName}-PythonLambdaLayer"}
      Role:
        Fn::GetAtt: [ bookstoreNeptuneLoaderLambdaRole, Arn ]
      Runtime: python3.6
      Timeout: 180
      VpcConfig:
        SecurityGroupIds:
          - Ref: bookstoreNeptuneSecurityGroup
        SubnetIds:
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet1"}
          - !ImportValue {"Fn::Sub": "${NetworkStackName}-PrivateSubnet2"}
  bookstoreNeptuneLoaderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
Outputs:
  NeptuneSecurityGroup:
    Value: !Ref bookstoreNeptuneSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneSecurityGroup
  NeptuneClusterEndpoint:
    Value: !GetAtt bookstoreNeptuneCluster.Endpoint
    Export:
      Name: !Sub ${AWS::StackName}-NeptuneClusterEndpoint
